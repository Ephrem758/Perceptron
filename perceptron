import numpy as np

class Perceptron:
    def __init__(self, learning_rate=0.1, num_iterations=1000):
        self.learning_rate = learning_rate
        self.num_iterations = num_iterations
        
    def fit(self, X, y):
        # Add a bias term to the input data
        X = np.insert(X, 0, 1, axis=1)
        
        # Initialize the weights to zero
        self.weights = np.zeros(X.shape[1])
        
        # Iterate over the training data for the specified number of iterations
        for i in range(self.num_iterations):
            for j in range(X.shape[0]):
                # Compute the predicted output
                predicted = np.dot(X[j], self.weights)
                if predicted >= 0:
                    predicted = 1
                else:
                    predicted = -1
                
                # Update the weights if the predicted output doesn't match the true output
                if predicted != y[j]:
                    self.weights += self.learning_rate * y[j] * X[j]
                    
    def predict(self, X):
        # Add a bias term to the input data
        X = np.insert(X, 0, 1, axis=1)
        
        # Compute the predicted output for each input
        y_pred = np.dot(X, self.weights)
        y_pred[y_pred >= 0] = 1
        y_pred[y_pred < 0] = -1
        
        return y_pred

# Create a simple dataset with two classes
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([-1, -1, -1, 1])

# Create a perceptron and train it on the dataset
perceptron = Perceptron()
perceptron.fit(X, y)

# Use the trained perceptron to make predictions on new data
X_test = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_pred = perceptron.predict(X_test)
print(y_pred)  # Output: array([-1, -1, -1,  1])
